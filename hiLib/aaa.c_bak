
#include "hiLib.h"

#define SAMPLE_MAX_VDEC_CHN_CNT 32


typedef struct sample_vdec_sendparam
{
	pthread_t Pid;
	HI_BOOL bRun;
	VDEC_CHN VdChn;
	PAYLOAD_TYPE_E enPayload;
	HI_S32 s32MinBufSize;
	VIDEO_MODE_E enVideoMode;
}SAMPLE_VDEC_SENDPARAM_S;


typedef struct hi_decode_dec_t
{
	VDEC_CHN VdChn;//视频显示通道
	PAYLOAD_TYPE_E enType;
	PIC_SIZE_E picSize;
}hi_decode_dec_t;

typedef struct hi_decode_vpss_t
{
	VPSS_GRP VpssGrp;
}hi_decode_vpss_t;

typedef struct hi_decode_vo_t
{
	VO_CHN VoChn;
	HI_U32 u32ViFrmRate;
}hi_decode_vo_t;

typedef struct hi_decode_info_t
{
//	int displayNum;//分屏数
	VO_DEV VoDev;
	VIDEO_NORM_E videoNorm;

	hi_decode_dec_t decInfo[SAMPLE_MAX_VDEC_CHN_CNT];
	hi_decode_vpss_t vpssInfo[SAMPLE_MAX_VDEC_CHN_CNT];
	hi_decode_vo_t voInfo;
}hi_decode_info_t;



static hi_decode_info_t g_decodeInfo;// = {SAMPLE_VO_DEV_DHD0, VIDEO_ENCODING_MODE_PAL, 0, 0, 0};


static void SAMPLE_VDEC_WaitDestroyVdecChn(HI_S32 s32ChnID, VIDEO_MODE_E enVdecMode)
{
	HI_S32 s32Ret;
	VDEC_CHN_STAT_S stStat;

	memset(&stStat, 0, sizeof(VDEC_CHN_STAT_S));

	s32Ret = HI_MPI_VDEC_StopRecvStream(s32ChnID);
	if (s32Ret != HI_SUCCESS)
	{
		SAMPLE_PRT("HI_MPI_VDEC_StopRecvStream failed errno 0x%x \n", s32Ret);
		return;
	}

	/*** wait destory ONLY used at frame mode! ***/
	if (VIDEO_MODE_FRAME == enVdecMode)
	{
		while (1)
		{
			//printf("LeftPics:%d, LeftStreamFrames:%d\n", stStat.u32LeftPics,stStat.u32LeftStreamFrames);
			usleep(40000);
			s32Ret = HI_MPI_VDEC_Query(s32ChnID, &stStat);
			if (s32Ret != HI_SUCCESS)
			{
				SAMPLE_PRT("HI_MPI_VDEC_Query failed errno 0x%x \n", s32Ret);
				return;
			}
			if ((stStat.u32LeftPics == 0) && (stStat.u32LeftStreamFrames == 0))
			{
				printf("had no stream and pic left\n");
				break;
			}
		}
	}
	s32Ret = HI_MPI_VDEC_DestroyChn(s32ChnID);
	if (s32Ret != HI_SUCCESS)
	{
		SAMPLE_PRT("HI_MPI_VDEC_DestroyChn failed errno 0x%x \n", s32Ret);
		return;
	}
}

static HI_S32 SAMPLE_VDEC_CreateVdecChn(HI_S32 s32ChnID, SIZE_S *pstSize, PAYLOAD_TYPE_E enType, VIDEO_MODE_E enVdecMode)
{
    VDEC_CHN_ATTR_S stAttr;
    VDEC_PRTCL_PARAM_S stPrtclParam;
    HI_S32 s32Ret;

    memset(&stAttr, 0, sizeof(VDEC_CHN_ATTR_S));

    stAttr.enType = enType;
    stAttr.u32BufSize = pstSize->u32Height * pstSize->u32Width;//This item should larger than u32Width*u32Height/2
    stAttr.u32Priority = 1;//此处必须大于0
    stAttr.u32PicWidth = pstSize->u32Width;
    stAttr.u32PicHeight = pstSize->u32Height;
    
    switch (enType)
    {
        case PT_H264:
	    stAttr.stVdecVideoAttr.u32RefFrameNum = 1;
	    stAttr.stVdecVideoAttr.enMode = enVdecMode;
	    stAttr.stVdecVideoAttr.s32SupportBFrame = 1;
            break;
        case PT_JPEG:
            stAttr.stVdecJpegAttr.enMode = enVdecMode;
            break;
        case PT_MJPEG:
            stAttr.stVdecJpegAttr.enMode = enVdecMode;
            break;
        default:
            printf("err type \n");
            return HI_FAILURE;
    }

    s32Ret = HI_MPI_VDEC_CreateChn(s32ChnID, &stAttr);
    if (HI_SUCCESS != s32Ret)
    {
        printf("HI_MPI_VDEC_CreateChn failed errno 0x%x \n", s32Ret);
        return s32Ret;
    }

    s32Ret = HI_MPI_VDEC_GetPrtclParam(s32ChnID, &stPrtclParam);
    if (HI_SUCCESS != s32Ret)
    {
        printf("HI_MPI_VDEC_GetPrtclParam failed errno 0x%x \n", s32Ret);
        return s32Ret;
    }

    stPrtclParam.s32MaxSpsNum = 21;
    stPrtclParam.s32MaxPpsNum = 22;
    stPrtclParam.s32MaxSliceNum = 100;
    s32Ret = HI_MPI_VDEC_SetPrtclParam(s32ChnID, &stPrtclParam);
    if (HI_SUCCESS != s32Ret)
    {
        printf("HI_MPI_VDEC_SetPrtclParam failed errno 0x%x \n", s32Ret);
        return s32Ret;
    }

    s32Ret = HI_MPI_VDEC_StartRecvStream(s32ChnID);
    if (HI_SUCCESS != s32Ret)
    {
        printf("HI_MPI_VDEC_StartRecvStream failed errno 0x%x \n", s32Ret);
        return s32Ret;
    }

    return HI_SUCCESS;
}

int hi_dec_mppInit(VIDEO_NORM_E videoNorm, PIC_SIZE_E picSize)
{
	HI_S32 s32Ret;
	HI_U32 u32BlkSize;
	VB_CONF_S stVbConf;

	memset(&stVbConf,0,sizeof(VB_CONF_S));

	u32BlkSize = SAMPLE_COMM_SYS_CalcPicVbBlkSize(videoNorm, picSize, SAMPLE_PIXEL_FORMAT, SAMPLE_SYS_ALIGN_WIDTH);
	stVbConf.u32MaxPoolCnt = 128;
	/*vdec no need common video buffer!*/

	s32Ret = SAMPLE_COMM_SYS_Init(&stVbConf);
	if (HI_SUCCESS != s32Ret)
	{
		printf("mpp init failed!\n");
		return HI_FAILURE;
	}
	if(1)//HI_TRUE == bVoHd)
	{
		s32Ret = SAMPLE_COMM_VPSS_MemConfig();
		if (HI_SUCCESS != s32Ret)
		{
			printf("SAMPLE_COMM_VPSS_MemConfig failed with %d!\n", s32Ret);
			//goto END_0;
		}
	}
	s32Ret = SAMPLE_COMM_VDEC_MemConfig();
	if (HI_SUCCESS != s32Ret)
	{
		printf("SAMPLE_COMM_VPSS_MemConfig failed with %d!\n", s32Ret);
		//goto END_0;
	}
	s32Ret = SAMPLE_COMM_VO_MemConfig(g_decodeInfo.VoDev, NULL);
	if (HI_SUCCESS != s32Ret)
	{
		printf("SAMPLE_COMM_VO_MemConfig failed with %d!\n", s32Ret);
		//goto END_0;
	}

	g_decodeInfo.videoNorm = videoNorm;

	return s32Ret;
}

int hi_dec_vpssStart(int channelNum, PIC_SIZE_E picSize)
{
	HI_S32 s32Ret;

	SIZE_S stSize;

	s32Ret = SAMPLE_COMM_SYS_GetPicSize(g_decodeInfo.videoNorm, picSize, &stSize);
	if (HI_SUCCESS !=s32Ret)
	{
		printf("get picture size failed!\n");
		return HI_FAILURE;
	}
	if (704 == stSize.u32Width)
	{
		stSize.u32Width = 720;
	}
	else if (352 == stSize.u32Width)
	{
		stSize.u32Width = 360;
	}
	else if (176 == stSize.u32Width)
	{
		stSize.u32Width = 180;
	}



	s32Ret = SAMPLE_COMM_VPSS_Start(channelNum, &stSize, VPSS_MAX_CHN_NUM, NULL);
	if (HI_SUCCESS !=s32Ret)
	{
		printf("vpss start failed!\n");
		//goto END_0;
	}

	return s32Ret;
}

int hi_dec_voStart(PIC_SIZE_E picSize)
{
	HI_S32 s32Ret;
	VO_PUB_ATTR_S stVoPubAttr;

	if(1)//HI_TRUE == bVoHd)
	{
		if(VIDEO_ENCODING_MODE_PAL== g_decodeInfo.videoNorm)
		{
			stVoPubAttr.enIntfSync = VO_OUTPUT_1080P50;
		}
		else
		{
			stVoPubAttr.enIntfSync = VO_OUTPUT_1080P60;
		}

		stVoPubAttr.enIntfType = VO_INTF_HDMI | VO_INTF_VGA;
		stVoPubAttr.u32BgColor = 0x000000ff;
		stVoPubAttr.bDoubleFrame = HI_FALSE;
	}
	else
	{
		if(VIDEO_ENCODING_MODE_PAL== g_decodeInfo.videoNorm)
		{
			stVoPubAttr.enIntfSync = VO_OUTPUT_PAL;
		}
		else
		{
			stVoPubAttr.enIntfSync = VO_OUTPUT_NTSC;
		}

		stVoPubAttr.enIntfType = VO_INTF_CVBS;
		stVoPubAttr.u32BgColor = 0x000000ff;
		stVoPubAttr.bDoubleFrame = HI_FALSE;
	}

	s32Ret = SAMPLE_COMM_VO_StartDevLayer(g_decodeInfo.VoDev, &stVoPubAttr, 25);//g_decodeInfo.voInfo.u32ViFrmRate);
	if (HI_SUCCESS != s32Ret)
	{
		printf("Start SAMPLE_COMM_VO_StartDevLayer failed!\n");
		//goto END_1;
	}

	s32Ret = SAMPLE_COMM_VO_StartChn(g_decodeInfo.VoDev, &stVoPubAttr, VO_MODE_1MUX);//enVoMode);
	if (HI_SUCCESS != s32Ret)
	{
		printf("Start SAMPLE_COMM_VO_StartChn failed!\n");
		//goto END_2;
	}

	if(1)//HI_TRUE == bVoHd)
	{
		/* if it's displayed on HDMI, we should start HDMI */
		if (stVoPubAttr.enIntfType & VO_INTF_HDMI)
		{
			if (HI_SUCCESS != SAMPLE_COMM_VO_HdmiStart(stVoPubAttr.enIntfSync))
			{
				printf("Start SAMPLE_COMM_VO_HdmiStart failed!\n");
				//goto END_1;
			}
		}
	}

	return s32Ret;
}

int hi_dec_voBindVpss(int channel)
{
	HI_S32 s32Ret;

	if(1)//HI_TRUE == bVoHd)
	{
		s32Ret = SAMPLE_COMM_VO_BindVpss(g_decodeInfo.VoDev, channel, channel, VPSS_PRE0_CHN);
		if (HI_SUCCESS != s32Ret)
		{
			printf("SAMPLE_COMM_VO_BindVpss failed!\n");
			//goto END_2;
		}
	}

	return s32Ret;
}

//int hi_dec_decStart(int channel, PAYLOAD_TYPE_E enType, PIC_SIZE_E picSize)
int hi_dec_openChannel(int channel, PAYLOAD_TYPE_E enType, PIC_SIZE_E picSize)
{
	HI_S32 s32Ret;
	SIZE_S stSize;
	VIDEO_MODE_E enVdecMode;

	if(PT_H264 == enType)
	{
		enVdecMode = VIDEO_MODE_FRAME;
	}
	else	//JPEG, MJPEG must be Frame mode!
	{
		enVdecMode = VIDEO_MODE_FRAME;
	}

	s32Ret = SAMPLE_COMM_SYS_GetPicSize(g_decodeInfo.videoNorm, picSize, &stSize);
	if (HI_SUCCESS !=s32Ret)
	{
		printf("get picture size failed!\n");
		return HI_FAILURE;
	}
	if (704 == stSize.u32Width)
	{
		stSize.u32Width = 720;
	}
	else if (352 == stSize.u32Width)
	{
		stSize.u32Width = 360;
	}
	else if (176 == stSize.u32Width)
	{
		stSize.u32Width = 180;
	}

	/*** create vdec chn ***/
	s32Ret = SAMPLE_VDEC_CreateVdecChn(channel, &stSize, enType, enVdecMode);
	if (HI_SUCCESS !=s32Ret)
	{
		printf("create vdec chn failed!\n");
//		//goto END_3;
	}

	return s32Ret;
}

int hi_dec_decBindVo(int channel)
{
	HI_S32 s32Ret;

	/*** bind vdec to vpss ***/
	if(1)//HI_TRUE == bVoHd)
	{
		s32Ret = SAMLE_COMM_VDEC_BindVpss(channel, channel);
		if (HI_SUCCESS !=s32Ret)
		{
			printf("vdec(vdch=%d) bind vpss(vpssg=%d) failed!\n", channel, channel);
//			//goto END_3;
		}
	}
	else
	{
		s32Ret = SAMLE_COMM_VDEC_BindVo(channel, g_decodeInfo.VoDev, channel);
		if (HI_SUCCESS !=s32Ret)
		{
			printf("vdec(vdch=%d) bind vpss(vpssg=%d) failed!\n", channel, channel);
//			//goto END_3;
		}
	}

	return s32Ret;
}

int hi_dec_sendStream(int channel, char *pFrameBuf, int frameLen)
{
	static HI_U64 pts= 0;
	HI_S32 s32Ret = 0;
	HI_S32 s32BlockMode = HI_IO_BLOCK;
	HI_S32 s32IntervalTime = 40000;
	VDEC_STREAM_S stStream;

	stStream.u64PTS = pts;
	pts += 40000;
	stStream.pu8Addr = (unsigned char *)pFrameBuf;
	stStream.u32Len = frameLen;

	s32Ret = HI_MPI_VDEC_SendStream(channel, &stStream, s32BlockMode);
	if (HI_SUCCESS != s32Ret)
	{
		usleep(s32IntervalTime);
	}
	if(s32BlockMode == HI_IO_NOBLOCK && s32Ret == HI_FAILURE)
	{
		usleep(s32IntervalTime);
	}
	else if(s32BlockMode == HI_IO_BLOCK && s32Ret == HI_FAILURE)
	{
		usleep(s32IntervalTime);
	}

	return 0;
}

/* 关闭解码通道 */
int hi_dec_closeChannel(int channel)
{
	int i = 0;
	HI_U32 u32WndNum = 1;
	SAMPLE_VO_MODE_E enVoMode = VO_MODE_1MUX;
	HI_BOOL bVoHd = HI_TRUE;
	VIDEO_MODE_E enVdecMode = VIDEO_MODE_FRAME;
	VO_PUB_ATTR_S stVoPubAttr;

	stVoPubAttr.enIntfType = VO_INTF_HDMI;

	SAMPLE_VDEC_WaitDestroyVdecChn(channel, enVdecMode);
	if(HI_TRUE == bVoHd)
	{
		SAMLE_COMM_VDEC_UnBindVpss(channel, channel);
	}
	else
	{
		SAMLE_COMM_VDEC_UnBindVo(channel, g_decodeInfo.VoDev, channel);
	}
	/******************************************
	 *           step 9: stop vo
	 ******************************************/
	if (HI_TRUE == bVoHd)
	{
		SAMPLE_COMM_VO_UnBindVpss(g_decodeInfo.VoDev, channel, channel, VPSS_PRE0_CHN);
	}
	SAMPLE_COMM_VO_StopChn(g_decodeInfo.VoDev, enVoMode);
	SAMPLE_COMM_VO_StopDevLayer(g_decodeInfo.VoDev);
	if (HI_TRUE == bVoHd)
	{
		if(stVoPubAttr.enIntfType & VO_INTF_HDMI)
		{
			SAMPLE_COMM_VO_HdmiStop();
		}
		SAMPLE_COMM_VPSS_Stop(channel, VPSS_MAX_CHN_NUM);
	}
	/******************************************
	 *           step 10: exit mpp system
	 ******************************************/
	SAMPLE_COMM_SYS_Exit();

	return HI_SUCCESS;
}


