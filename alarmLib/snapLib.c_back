

#include "hiLib.h"
#include "commonLib.h"
#include "configLib.h"
#include "snapLib.h"


static pthread_t  SnapTh;
static pthread_t  MdThread;

static HI_S32 threadFlg[16] = {0};
static HI_S32 gs_s32SnapCnt[16] = {0};
static VENC_GETSTREAM_PARA_S gs_stParaSnap;
static SNAP_GETSTAT_S gs_stParaMd;



int set_snapFlag(unsigned char channel,unsigned char status)
{
	if((channel<0)&&(channel>configGetDisplayNum()))
	{
		Printf("snap channel is  invalid\n");
		return -1;
	}
	if(getActionAlarmStatus(channel)==1)
	{
		threadFlg[channel]=status;
	}
	return 0;
}




#ifndef HI3535 //ssf

/******************************************************************************
 * function : get picture size(w*h), according Norm and enPicSize
 ******************************************************************************/
HI_S32 get_snap_pic_size(VIDEO_NORM_E enNorm, PIC_SIZE_E enPicSize, SIZE_S *pstSize)
{
	switch (enPicSize)
	{
		case PIC_QCIF:
			pstSize->u32Width = D1_WIDTH / 4;
			pstSize->u32Height = (VIDEO_ENCODING_MODE_PAL==enNorm)?144:120;
			break;
		case PIC_CIF:
			pstSize->u32Width = D1_WIDTH / 2;
			pstSize->u32Height = (VIDEO_ENCODING_MODE_PAL==enNorm)?288:240;
			break;
		case PIC_D1:
			pstSize->u32Width = D1_WIDTH;
			pstSize->u32Height = (VIDEO_ENCODING_MODE_PAL==enNorm)?576:480;
			break;
		case PIC_960H:
			pstSize->u32Width = 960;
			pstSize->u32Height = (VIDEO_ENCODING_MODE_PAL==enNorm)?576:480;
			break;			
		case PIC_2CIF:
			pstSize->u32Width = D1_WIDTH / 2;
			pstSize->u32Height = (VIDEO_ENCODING_MODE_PAL==enNorm)?576:480;
			break;
		case PIC_QVGA:    /* 320 * 240 */
			pstSize->u32Width = 320;
			pstSize->u32Height = 240;
			break;
		case PIC_VGA:     /* 640 * 480 */
			pstSize->u32Width = 640;
			pstSize->u32Height = 480;
			break;
		case PIC_XGA:     /* 1024 * 768 */
			pstSize->u32Width = 1024;
			pstSize->u32Height = 768;
			break;
		case PIC_SXGA:    /* 1400 * 1050 */
			pstSize->u32Width = 1400;
			pstSize->u32Height = 1050;
			break;
		case PIC_UXGA:    /* 1600 * 1200 */
			pstSize->u32Width = 1600;
			pstSize->u32Height = 1200;
			break;
		case PIC_QXGA:    /* 2048 * 1536 */
			pstSize->u32Width = 2048;
			pstSize->u32Height = 1536;
			break;
		case PIC_WVGA:    /* 854 * 480 */
			pstSize->u32Width = 854;
			pstSize->u32Height = 480;
			break;
		case PIC_WSXGA:   /* 1680 * 1050 */
			pstSize->u32Width = 1680;
			pstSize->u32Height = 1050;
			break;
		case PIC_WUXGA:   /* 1920 * 1200 */
			pstSize->u32Width = 1920;
			pstSize->u32Height = 1200;
			break;
		case PIC_WQXGA:   /* 2560 * 1600 */
			pstSize->u32Width = 2560;
			pstSize->u32Height = 1600;
			break;
		case PIC_HD720:   /* 1280 * 720 */
			pstSize->u32Width = 1280;
			pstSize->u32Height = 720;
			break;
		case PIC_HD1080:  /* 1920 * 1080 */
			pstSize->u32Width = 1920;
			pstSize->u32Height = 1080;
			break;
		default:
			return HI_FAILURE;
	}
	return HI_SUCCESS;
}



int venc_snap_init( VIDEO_NORM_E enNorm, VENC_CHN VencChn,PIC_SIZE_E enPicSize )
{
	HI_S32 i,s32Ret;
	VENC_GRP VencGrp;
	VENC_CHN SnapChn;
	SIZE_S picSize;

	VencGrp = VencChn;
	SnapChn = VencChn;

	s32Ret = get_snap_pic_size(enNorm, enPicSize, &picSize);
	if(s32Ret != HI_SUCCESS)
	{
		return s32Ret;
	}	
	s32Ret = venc_snap_start(VencGrp,SnapChn,&picSize);
	if(s32Ret != HI_SUCCESS)
	{
		return s32Ret;
	}	
	return HI_SUCCESS;   
}

/******************************************************************************
 * funciton : bind venc and vpss. 
 ******************************************************************************/
HI_S32 venc_bind_vpss(VENC_GRP GrpChn,VPSS_GRP VpssGrp,VPSS_CHN VpssChn)
{
	HI_S32 s32Ret;
	MPP_CHN_S stSrcChn;
	MPP_CHN_S stDestChn;

	stSrcChn.enModId = HI_ID_VPSS;
	stSrcChn.s32DevId = VpssGrp;
	stSrcChn.s32ChnId = VpssChn;

	stDestChn.enModId = HI_ID_GROUP;
	stDestChn.s32DevId = GrpChn;
	stDestChn.s32ChnId = 0;

	s32Ret = HI_MPI_SYS_Bind(&stSrcChn, &stDestChn);
	if (s32Ret != HI_SUCCESS)
	{
		Printf("failed with %#x!\n", s32Ret);
		return HI_FAILURE;
	}

	return HI_SUCCESS;
}


/******************************************************************************
 * funciton : Create venc and Start recv pic . 
 ******************************************************************************/
HI_S32 venc_snap_start(VENC_GRP VencGrp,VENC_CHN VencChn, SIZE_S *pstSize)
{
	HI_S32 s32Ret;
	VENC_CHN_ATTR_S stVencChnAttr;
	VENC_ATTR_JPEG_S stJpegAttr;
	VPSS_GRP vpssGrp;
	GROUP_COLOR2GREY_CONF_S stGrpColor2GreyConf;
	GROUP_COLOR2GREY_S stGrpColor2Grey;

	vpssGrp = VencChn;

	s32Ret = HI_MPI_VENC_CreateGroup(VencGrp);
	if (HI_SUCCESS != s32Ret)
	{
		Printf("HI_MPI_VENC_CreateGroup[%d] failed with %#x!\n",VencGrp, s32Ret);
		return HI_FAILURE;
	}

	stVencChnAttr.stVeAttr.enType = PT_JPEG;
	stJpegAttr.u32MaxPicWidth     = pstSize->u32Width;
	stJpegAttr.u32MaxPicHeight	  = pstSize->u32Height;
	stJpegAttr.u32PicWidth 	   	  = pstSize->u32Width;
	stJpegAttr.u32PicHeight	      = pstSize->u32Height;
	stJpegAttr.u32BufSize 	      = pstSize->u32Width * pstSize->u32Height * 2;
	stJpegAttr.bByFrame 	      = HI_TRUE;
	stJpegAttr.bVIField 	      = HI_FALSE;
	stJpegAttr.u32Priority	      = 0;
	memcpy(&stVencChnAttr.stVeAttr.stAttrJpeg, &stJpegAttr, sizeof(VENC_ATTR_JPEG_S));

	s32Ret = HI_MPI_VENC_CreateChn(VencChn, &stVencChnAttr);
	if (HI_SUCCESS != s32Ret)
	{
		Printf("HI_MPI_VENC_CreateChn [%d] faild with %#x!\n",VencChn, s32Ret);
		return s32Ret;
	}
	s32Ret = HI_MPI_VENC_RegisterChn(VencGrp, VencChn);
	if (HI_SUCCESS != s32Ret)
	{
		Printf("HI_MPI_VENC_RegisterChn faild with %#x!\n", s32Ret);
		return HI_FAILURE;
	}
	/******************************************
step : venc bind vpss
	 ******************************************/
	//s32Ret = venc_bind_vpss(VencGrp, vpssGrp, 0);
	s32Ret = venc_bind_vpss(VencGrp, vpssGrp, 1);
	if (HI_SUCCESS != s32Ret)
	{
		Printf("SAMPLE_COMM_VENC_BindVpss failed!\n");
		return HI_FAILURE;
	}

#if 0 
	//hi3535 彩转灰,报错,库里未定义???????
	/******************************************
step : Set color2grey conf
	 ******************************************/
	stGrpColor2GreyConf.bEnable = HI_TRUE;
	stGrpColor2GreyConf.u32MaxWidth = pstSize->u32Width;
	stGrpColor2GreyConf.u32MaxHeight = pstSize->u32Height;
	s32Ret = HI_MPI_VENC_SetColor2GreyConf(&stGrpColor2GreyConf);
	if (HI_SUCCESS != s32Ret)
	{
		Printf("SetColor2GreyConf failed!\n");
	}
	/******************************************
step : Enable a grp with color2grey 
	 ******************************************/
	stGrpColor2Grey.bColor2Grey = HI_TRUE;
	s32Ret = HI_MPI_VENC_SetGrpColor2Grey(VencGrp, &stGrpColor2Grey);
	if (HI_SUCCESS != s32Ret)
	{
		Printf("SetGrpColor2Grey failed!\n");
	}
#endif
#if 0
	s32Ret = HI_MPI_VENC_StartRecvPic(VencChn);
	if (HI_SUCCESS != s32Ret)
	{
		Printf("HI_MPI_VENC_StartRecvPic faild with%#x!\n", s32Ret);
		return HI_FAILURE;
	}	
#endif
	return HI_SUCCESS;
}


/******************************************************************************
 * funciton : Create venc and Start recv pic . 
 ******************************************************************************/
HI_S32 venc_snap_stop(VENC_GRP VencGrp,VENC_CHN VencChn)
{
	HI_S32 s32Ret;
	VPSS_GRP vpssGrp;
	MPP_CHN_S stSrcChn;
	MPP_CHN_S stDestChn;

	vpssGrp = VencChn;//???????

	s32Ret = HI_MPI_VENC_DestroyGroup(VencGrp);
	if (HI_SUCCESS != s32Ret)
	{
		Printf("HI_MPI_VENC_CreateGroup[%d] failed with %#x!\n",VencGrp, s32Ret);
		return HI_FAILURE;
	}

	s32Ret = HI_MPI_VENC_DestroyChn(VencChn);
	if (HI_SUCCESS != s32Ret)
	{
		Printf("HI_MPI_VENC_CreateChn [%d] faild with %#x!\n",VencChn, s32Ret);
		return s32Ret;
	}
	s32Ret = HI_MPI_VENC_UnRegisterChn(VencChn);
	if (HI_SUCCESS != s32Ret)
	{
		Printf("HI_MPI_VENC_RegisterChn faild with %#x!\n", s32Ret);
		return HI_FAILURE;
	}
	/******************************************
step : venc unBind vpss
	 ******************************************/
	stSrcChn.enModId = HI_ID_VPSS;
	stSrcChn.s32DevId = vpssGrp;
	stSrcChn.s32ChnId = 0;

	stDestChn.enModId = HI_ID_GROUP;
	stDestChn.s32DevId = VencGrp;
	stDestChn.s32ChnId = 0;

	s32Ret = HI_MPI_SYS_UnBind(&stSrcChn, &stDestChn);
	if (s32Ret != HI_SUCCESS)
	{
		Printf("failed with %#x!\n", s32Ret);
		return HI_FAILURE;
	}
	/******************************************
step : stop recv pic
	 ******************************************/
	s32Ret = HI_MPI_VENC_StopRecvPic(VencChn);
	if (HI_SUCCESS != s32Ret)
	{
		Printf("HI_MPI_VENC_StartRecvPic faild with%#x!\n", s32Ret);
		return HI_FAILURE;
	}	
	return HI_SUCCESS;
}



void  *venc_start_snap_query(void *p)
{
	HI_S32 s32VencStartRecv[VENC_MAX_CHN_NUM] = {0};
	int s32ChnTotal = 0;
	HI_S32 s32Ret,i;
	SNAP_GETSTAT_S *pstPara;

	pstPara = (SNAP_GETSTAT_S*)p;
	s32ChnTotal = pstPara->s32Cnt;
	if (s32ChnTotal > VENC_MAX_CHN_NUM)
	{
		Printf("input count invaild\n");
		return HI_FAILURE;
	}

	/* Start to get mdStat of each channel.*/
	while(HI_TRUE == pstPara->bThreadMd)
	{
		for (i = 0; i < s32ChnTotal; i++)
		{	
			if((VideoMDGetStatus(i) != 1))
			{
				/*if not MD stop recv pic with chn.*/
				if(1 == s32VencStartRecv[i])
				{
					s32Ret = HI_MPI_VENC_StopRecvPic(i);
					if (HI_SUCCESS != s32Ret)
					{
						Printf("HI_MPI_VENC_StopRecvPic faild with%#x!\n", s32Ret);
						return HI_FAILURE;
					}
					s32VencStartRecv[i] = 0;
				}
				continue;
			}

			if(0 == s32VencStartRecv[i] && pstPara->bSnapEn[i] == HI_TRUE)
			{
				/*if MD start recv pic with chn .*/
				Printf("MD !!! start recv pic with chn = %d!\n", i);
				s32Ret = HI_MPI_VENC_StartRecvPic(i);
				if (HI_SUCCESS != s32Ret)
				{
					Printf("HI_MPI_VENC_StartRecvPic faild with%#x!\n", s32Ret);
					return HI_FAILURE;
				}
				s32VencStartRecv[i] = 1;
			}
		}

		usleep(30*1000);
	}

	return HI_SUCCESS;

}

void  *venc_get_stream(void *p)
{
	struct timeval TimeoutVal;
	fd_set read_fds;
	HI_S32 s32VencFd[VENC_MAX_CHN_NUM];
	int s32ChnTotal = 0;
	VENC_CHN_STAT_S stStat;
	VENC_STREAM_S stStream;
	VENC_PACK_S *packet = NULL;
	HI_S32 s32Ret,i;
	VENC_CHN VencChn;
	int maxfd = 0;
	int j = 0, s32FrameNum = 0;
	//VENC_RECV_PIC_PARAM_S stRecvParam;
	//HI_CHAR snapPathFile[100] = "/nfsroot/jpg/";
	HI_CHAR snapPathFile[100] = "/tmp/";
	VENC_GETSTREAM_PARA_S *pstPara;

	pstPara = (SAMPLE_VENC_GETSTREAM_PARA_S*)p;
	s32ChnTotal = pstPara->s32Cnt;
	if (s32ChnTotal > VENC_MAX_CHN_NUM)
	{
		Printf("input count invaild\n");
		return HI_FAILURE;
	}

	/*motion detect thread*/
	gs_stParaMd.bThreadMd = HI_TRUE; 
	gs_stParaMd.s32Cnt = s32ChnTotal;
	for(i = 0; i < s32ChnTotal; i++)
	{
		gs_stParaMd.bSnapEn[i] = HI_TRUE;
	}
	pthread_create(&MdThread, 0, venc_start_snap_query, (HI_VOID*)&gs_stParaMd);

	/* get Venc Fd. */
	for(i = 0; i < s32ChnTotal; i++)
	{
		s32VencFd[i] = HI_MPI_VENC_GetFd(i);
		if (s32VencFd[i] < 0)
		{
			Printf("HI_MPI_VENC_GetFd failed with %#x!\n", s32VencFd[i]);
			return HI_FAILURE;
		}
		if (maxfd <= s32VencFd[i])
		{
			maxfd = s32VencFd[i];
		}
	}

	/* Start to get streams of each channel.*/
	while(HI_TRUE == pstPara->bThreadStart)
	{
		FD_ZERO(&read_fds);
		for (i = 0; i < s32ChnTotal; i++)
		{
			FD_SET(s32VencFd[i], &read_fds);
		}

		/*select return success, all packages in the complete frame*/
		TimeoutVal.tv_sec  = 1;
		TimeoutVal.tv_usec = 0;
		s32Ret = select(maxfd+1, &read_fds, NULL, NULL, &TimeoutVal);
		if (s32Ret < 0) 
		{
			Printf("snap select failed!\n");
			return HI_FAILURE;
		}
		else if (0 == s32Ret) 
		{
			//Printf("snap time out !\n");
			continue;
		}
		else
		{
			for(i = 0; i < s32ChnTotal; i++)
			{
				VencChn = i;
				if (FD_ISSET(s32VencFd[VencChn], &read_fds))
				{
					/*query how many packs in one-frame stream.*/
					s32Ret = HI_MPI_VENC_Query(VencChn, &stStat);
					if (s32Ret != HI_SUCCESS)
					{
						Printf("HI_MPI_VENC_Query chn[%d] failed with %#x!\n", VencChn, s32Ret);
						return HI_FAILURE;
					}
					/*malloc corresponding number of pack nodes*/
					stStream.pstPack = (VENC_PACK_S*)malloc(sizeof(VENC_PACK_S) * stStat.u32CurPacks);
					if (NULL == stStream.pstPack)
					{
						Printf("malloc memory failed!\n");
						return HI_FAILURE;
					}
					/* call mpi to get one-frame stream*/
					stStream.u32PackCount = stStat.u32CurPacks;
					s32Ret = HI_MPI_VENC_GetStream(VencChn, &stStream, HI_TRUE);
					if (HI_SUCCESS != s32Ret)
					{
						Printf("HI_MPI_VENC_GetStream failed with %#x!\n", s32Ret);
						free(stStream.pstPack);
						stStream.pstPack = NULL;
						return HI_FAILURE;
					}
					/* save frame to file*/
					s32Ret = venc_save_stream(VencChn, &stStream, snapPathFile);
					if (HI_SUCCESS != s32Ret)
					{
						Printf("venc_save_stream failed with %#x!\n", s32Ret);
						free(stStream.pstPack);
						stStream.pstPack = NULL;
						return HI_FAILURE;
					}
					/* release stream*/
					s32Ret = HI_MPI_VENC_ReleaseStream(VencChn, &stStream);
					if (s32Ret)
					{
						Printf("HI_MPI_VENC_ReleaseStream failed with %#x!\n", s32Ret);
						free(stStream.pstPack);
						stStream.pstPack = NULL;
						return HI_FAILURE;
					}
					/*free pack nodes*/
					free(stStream.pstPack);
					stStream.pstPack = NULL;

				}

			}

		}

	}

	return HI_SUCCESS;

}



int start_snap_pthread(HI_S32 s32Cnt)
{
	gs_stParaSnap.bThreadStart = HI_TRUE;
	gs_stParaSnap.s32Cnt = s32Cnt;

	return pthread_create(&SnapTh, 0, venc_get_stream, (HI_VOID*)&gs_stParaSnap);
}


/******************************************************************************
 * funciton : save mjpeg stream. 
 * WARNING: in Hi3531, user needn't write SOI & EOI.
 ******************************************************************************/
HI_S32 venc_save_jpge(FILE* fpJpegFile, VENC_STREAM_S *pstStream)
{
	VENC_PACK_S*  pstData;
	HI_U32 i;

	for (i = 0; i < pstStream->u32PackCount; i++)
	{
		pstData = &pstStream->pstPack[i];
		fwrite(pstData->pu8Addr[0], pstData->u32Len[0], 1, fpJpegFile);
		fwrite(pstData->pu8Addr[1], pstData->u32Len[1], 1, fpJpegFile);
	}
	return HI_SUCCESS;
}

/******************************************************************************
 * funciton : save snap stream & stream path
 ******************************************************************************/
HI_S32 venc_save_stream(VENC_CHN VencChn, VENC_STREAM_S *pstStream, char *PathFile)
{
	char acFile[50]  = {0};
	char snapPath[100] = {0};
	FILE *pFile;
	HI_S32 s32Ret;
	//sprintf(acFile, "/nfsroot/jpg/snap_%d_%d.jpg", VencChn, gs_s32SnapCnt[VencChn]);
	//pFile = fopen(acFile, "wb");
	strcpy(snapPath, PathFile);
	sprintf(acFile, "snap_%d.jpg", VencChn);
	strcat(snapPath, acFile);
	pFile = fopen(snapPath, "wb");
	if (pFile == NULL)
	{
		SAMPLE_PRT("open file err\n");
		return HI_FAILURE;
	}
	s32Ret = venc_save_jpge(pFile, pstStream);
	if (HI_SUCCESS != s32Ret)
	{
		SAMPLE_PRT("save snap picture failed!\n");
		return HI_FAILURE;
	}
	Printf("snapPath = %s\n", snapPath);
	fclose(pFile);
	gs_s32SnapCnt[VencChn]++;
	if(gs_s32SnapCnt[VencChn] >= 1024)
	{
		gs_s32SnapCnt[VencChn] = 0;
	}
	return HI_SUCCESS;
}

int SnapThreadStart(void)
{
	int chn = 0;
	int displayNum = 0;
	int s32Ret;
	VIDEO_NORM_E enNorm = VIDEO_ENCODING_MODE_PAL;

	displayNum = configGetDisplayNum();
	for(chn = 0; chn < displayNum; chn++)
	{
		venc_snap_init(enNorm, chn, PIC_CIF);
		//venc_snap_init(enNorm, chn, PIC_D1);
	}
	start_snap_pthread(displayNum);
}


#endif






